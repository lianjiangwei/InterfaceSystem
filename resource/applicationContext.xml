<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		                    http://www.springframework.org/schema/context 
		                    http://www.springframework.org/schema/context/spring-context-3.0.xsd
		                    http://www.springframework.org/schema/tx 
		                    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		                    http://www.springframework.org/schema/aop 
		                    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"  default-autowire="no">

	<!--开启Spring注解扫描 -->
	<context:component-scan base-package="com.tgb.interfaceSystem.*" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<!--数据库连接信息配置  -->
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 其他配置 -->
		<!--maxActive: 最大连接数量-->    
        <property name="maxActive" value="200"/>  
        <!--minIdle: 最小空闲连接-->    
        <property name="minIdle" value="5"/>  
        <!--maxIdle: 最大空闲连接-->    
        <property name="maxIdle" value="40"/>  
        <!--initialSize: 初始化连接-->    
        <property name="initialSize" value="30"/>  
        <!-- 连接被泄露时是否打印 -->  
        <property name="logAbandoned" value="true"/>  
        <!--removeAbandoned: 是否自动回收超时连接-->    
        <property name="removeAbandoned"  value="false"/>  
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
        <property name="removeAbandonedTimeout" value="30"/>  
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->  
        <property name="maxWait" value="1000000"/>  
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>  
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="10"/>  
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
        <property name="minEvictableIdleTimeMillis" value="10000"/>  
	</bean>
	<!-- 配置外部数据库连接信息 -->
	<context:property-placeholder location="classpath:db.properties" />

	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">

		<!-- 1.配置datasource -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 2.配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<!--事务隔离级别  -->
				<prop key="hibernate.connection.isolation">2</prop>
				<!--启用本地线程  -->
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.jdbc.batch_size">100</prop>
			</props>
		</property>

		<!-- 配置映射文件 已经不采用配置文件的形式了 -->
		<!-- <property name="mappingLocations"> <list> <value>classpath:cn/itcast/ssh/domain/*.hbm.xml</value> 
			</list> </property> -->

		<!--3.指定进行了Hibernate注解开发的包，方便框架进行扫描设置 -->
		 <property name="packagesToScan">
			<list>
				<value>com.tgb.interfaceSystem.entity</value>
			</list>
		</property> 
	</bean>

	<!-- 创建SessionFactory，这是spring整合hibernate的核心 -->
	<!--用LocalSessionFactoryBean的形式的话，需要采用配置文件的形式进行注入实体，本次不采，而采用AnnotationSessionFactoryBean形式，此类继承与LocalSessionFactoryBean -->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"> 
		1.配置datasource <property name="dataSource" ref="dataSource"></property> 2.配置Hibernate属性 
		<property name="hibernateProperties"> <value> hibernate.hbm2ddl.auto=update 
		hibernate.show_sql=true hibernate.dialect=org.hibernate.dialect.MySQL5Dialect 
		</value> </property> 3.配置映射文件 <property name="mappingLocations"> <list> <value>classpath:cn/itcast/ssh/domain/*.hbm.xml</value> 
		</list> </property> </bean> -->

	<!-- 配置事务 -->
	<!-- 1.配置事务管理器 -->
	<bean id="transManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!--采用注解形式进行事务的管理操作  -->
	<!-- <tx:annotation-driven transaction-manager="transManager"/> -->
	<!-- 2.配置事务通知，定义事务管理通知,采用注解形式进行事务管理 -->
	<!--tx:advice:定义事务管理的通知(环绕通知) transaction-manager:声明事务管理的实现类 tx:method:定义参与事务管理的方法 -->
	 <tx:advice id="txAdvice" transaction-manager="transManager">
		<tx:attributes>
			<!-- 定义事务需要管理的方法
			name	 name=“get*” 定义参与事务管理的方法,支持通配符
				  timeout 	timeout=-1 定义事务超时时间，-1为永不超时 
				read-only	 read-only=“false” 定义事务种类为只读事务或读写事务
				 no-rollback-for 						异常名称 定义不参与事务回滚的异常名 
				rollback-for 			异常名称 定义参与事务回滚的异常名 
				isolation Isolation 			定义事务隔离级
				 propagation propagation 		定义事务的传播属性 -->
			<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice> 


	<!-- 3.配置切面，定义AOP -->
	<aop:config>
		<!-- 定义切入点，切入点为业务逻辑层的所有接口中的方法 -->
		<aop:pointcut expression="execution(* com.tgb.interfaceSystem.service..*.*(..))"
			id="aopPointcut" />
		<!-- 定义一个切面，为其声明对应的通知和切入点 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="aopPointcut" />
	</aop:config> 


	<!-- Activiti的相关配置信息 -->
	<!-- 流程引擎的配置bean -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="transactionManager" ref="transManager" />
		<!--注入所需要的工作流的相关流程文件  -->
		<property name="deploymentResources">
			<list>
			<!-- 	<value>bpmn/event.bpmn</value> -->
			<value>classpath:/bpmn/*</value>
			</list>
		</property>
	</bean>
	<!-- 流程引擎的bean -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>


	<!-- 服务组件的bean -->
	<bean id="repositoryService" factory-bean="processEngine"
		factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine"
		factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine"
		factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine"
		factory-method="getHistoryService" />
	<bean id="identityService" factory-bean="processEngine"
		factory-method="getIdentityService" />
 	<bean id="managementService" factory-bean="processEngine"
		factory-method="getManagementService" />
 
</beans>                    